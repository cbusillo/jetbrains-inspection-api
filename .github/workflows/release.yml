name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build plugin
      run: ./gradlew buildPlugin
    
    - name: Get version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git tag --sort=-version:refname | grep -v "^${{ steps.get_version.outputs.VERSION }}$" | head -n 1)
        
        # Generate changelog with commit messages since last tag
        if [ -n "$PREV_TAG" ]; then
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes since $PREV_TAG" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log --oneline --no-merges ${PREV_TAG}..HEAD | sed 's/^/- /' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## Initial Release" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log --oneline --no-merges | sed 's/^/- /' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation
          
          1. Download the `jetbrains-inspection-api-${{ steps.get_version.outputs.VERSION }}.zip` file
          2. In your JetBrains IDE, go to **Settings** → **Plugins** → **⚙️** → **Install Plugin from Disk**
          3. Select the downloaded zip file and restart the IDE
          4. The plugin will be available on the IDE's built-in server port, you may need to enable it and external access.  
          
          ## MCP Integration
          
          ```bash
          # Add MCP server (replace /path/to with actual path and set IDE_PORT as needed)
          claude mcp add-json jetbrains '{"command": "node", "args": ["/path/to/jetbrains-inspection-api/mcp-server/server.js"], "env": {"IDE_PORT": "63340"}}'
          ```
        draft: false
        prerelease: false
        files: ./build/distributions/*.zip
    

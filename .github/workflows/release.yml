name: Release

on:
  push:
    tags:
      - 'v*'

run-name: "Release ${{ github.ref_name }}"

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Run tests
      run: ./gradlew test
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-results
        path: build/reports/tests/test/
        retention-days: 7

  mcp-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: mcp-server/package-lock.json
    
    - name: Install MCP dependencies
      run: cd mcp-server && npm ci
    
    - name: Test MCP server syntax
      run: cd mcp-server && node --check server.js
    
    - name: Run MCP server tests
      run: cd mcp-server && npm test

  release:
    needs: [test, mcp-test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build plugin
      run: ./gradlew buildPlugin
    
    - name: Get version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        current_tag="${{ steps.get_version.outputs.VERSION }}"
        
        # Last published release tag (empty if the project has no releases yet)
        last_release="$(gh release list --limit 1 --json tagName --jq '.[0].tagName' 2>/dev/null || true)"
        
        if [ -n "$last_release" ] && [ "$last_release" != "null" ] && git rev-parse -q "$last_release" >/dev/null; then
          title="## Changes since $last_release"
          range="${last_release}..HEAD"
        else
          title="## Changes in this release"
          range="-30"         
        fi
        
        changelog="$title\n\n$(git log --pretty=format:'- %s' --no-merges $range)"
        
        {
          echo 'CHANGELOG<<__CHANGELOG__'
          printf '%b\n' "$changelog"
          echo '__CHANGELOG__'
        } >>"$GITHUB_OUTPUT"
      env:
        GH_TOKEN: ${{ github.token }}
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation & Setup
          
          Download the `jetbrains-inspection-api-${{ steps.get_version.outputs.VERSION }}.zip` file below.
          
          For installation and setup instructions, see the [README Quick Start Guide](https://github.com/cbusillo/jetbrains-inspection-api#quick-start).
        draft: false
        prerelease: false
        files: ./build/distributions/*.zip
    
